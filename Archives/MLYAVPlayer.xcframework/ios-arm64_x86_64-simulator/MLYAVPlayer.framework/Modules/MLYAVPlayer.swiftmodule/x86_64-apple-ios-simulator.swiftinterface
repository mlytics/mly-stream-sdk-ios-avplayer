// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MLYAVPlayer
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import Foundation
@_exported import MLYAVPlayer
import MLYSDK
import MUXSDKStats
import Network
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class MLYAVPlayer : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var playerViewController: AVKit.AVPlayerViewController!
  @objc @_Concurrency.MainActor @preconcurrency public var playerItem: AVFoundation.AVPlayerItem?
  @objc @_Concurrency.MainActor @preconcurrency public var imagePage: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, _ url: Swift.String? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func play()
  @objc @_Concurrency.MainActor @preconcurrency public func pause()
  @objc @_Concurrency.MainActor @preconcurrency public func fastForward(_ seconds: Swift.Double = 10)
  @objc @_Concurrency.MainActor @preconcurrency public func rewind(_ seconds: Swift.Double = 10)
  @objc @_Concurrency.MainActor @preconcurrency public func snapshot() -> UIKit.UIImage?
  @objc @_Concurrency.MainActor @preconcurrency public func deView()
  @objc @_Concurrency.MainActor @preconcurrency public func replaceCurrentItem(playerItem: AVFoundation.AVPlayerItem)
  @objc deinit
}
extension MLYAVPlayer : MLYPreviewViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onProgressBarDragEnded(sender: UIKit.UISlider)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onProgressBarTouchUpOutside(sender: UIKit.UISlider)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onProgressBarSlideValueChanged(sender: UIKit.UISlider, thumbnailImageView: UIKit.UIImageView, thumbnailX: CoreFoundation.CGFloat, progress: Swift.Float)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onCurrentPositionUpdate(sender: UIKit.UISlider, progress: Swift.Float)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBufferPositionUpdate(sender: UIKit.UISlider, progress: Swift.Float)
}
extension MLYAVPlayer : MLYPreviewViewClickListener {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onClick(sender: UIKit.UIView?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYAVPlayerPlugin : ObjectiveC.NSObject {
  @objc public var playWhenReady: Swift.Bool
  @objc public func setLatency(_ latency: Swift.Double = 0)
  @objc public func adapt(_ playerViewController: AVKit.AVPlayerViewController)
  @objc public func deactivate()
  @objc deinit
  @objc public func buildAssetPlayerItem(origin: Foundation.URL) throws -> AVFoundation.AVPlayerItem
  @objc public func getProxyUrl(_ uri: Swift.String) -> Foundation.URL?
  @objc public func startProxy(_ playerItem: AVFoundation.AVPlayerItem)
  @objc public func startMonitor(_ playerLayer: AVFoundation.AVPlayerLayer? = nil, _ playerVC: AVKit.AVPlayerViewController? = nil)
  @objc public func stopMonitor()
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYPlayerManger : ObjectiveC.NSObject {
  @objc public func view() -> UIKit.UIView
  @objc public func src(_ src: Swift.String)
  @objc public func play()
  @objc public func controls(_ controls: Swift.Bool)
  @objc public func autoplay(_ autoplay: Swift.Bool)
  @objc public func muted(_ muted: Swift.Bool)
  @objc public func play(src: Swift.String)
  @objc public func pause()
  @objc public func stop()
  @objc public func setLatency(_ value: Swift.Double)
  @objc public func isMonitorAllowed(_ value: Swift.Bool)
  @objc public func isLoaderAllowed(_ value: Swift.Bool)
  public static func initialize(_ clientID: Swift.String, _ server: Swift.String?, _ debug: Swift.Bool?) throws
  @objc override dynamic public init()
  @objc deinit
}
public enum PlayerImageStringEnum : Swift.String {
  case pause
  case play
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol MLYPreviewViewDelegate {
  @objc func onProgressBarDragEnded(sender: UIKit.UISlider)
  @objc func onProgressBarTouchUpOutside(sender: UIKit.UISlider)
  @objc func onProgressBarSlideValueChanged(sender: UIKit.UISlider, thumbnailImageView: UIKit.UIImageView, thumbnailX: CoreFoundation.CGFloat, progress: Swift.Float)
  @objc func onCurrentPositionUpdate(sender: UIKit.UISlider, progress: Swift.Float)
  @objc func onBufferPositionUpdate(sender: UIKit.UISlider, progress: Swift.Float)
}
@objc public protocol MLYPreviewViewClickListener {
  @objc func onClick(sender: UIKit.UIView?)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class MLYPreviewView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any MLYPreviewViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var onClickListener: (any MLYPreviewViewClickListener)?
  @objc @_Concurrency.MainActor @preconcurrency final public let playImageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor @preconcurrency public var autoPlay: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var progressValue: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var remainingPlaybackValue: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var progressBufferValue: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var progressMaximumValue: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var showsPlaybackControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var autoHidePlaybackControlsTimeInterval: Swift.Double {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func seekTo(value: Swift.Float)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension PlayerImageStringEnum : Swift.Equatable {}
extension PlayerImageStringEnum : Swift.Hashable {}
extension PlayerImageStringEnum : Swift.RawRepresentable {}
